{"ast":null,"code":"import React from \"react\";\nconst foodTypes = {\n  meat: {\n    redmeat: {\n      subtypes: [\"beef\", \"lamb\", \"venison\"],\n      pairingArray: [2, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    curedmeat: {\n      icon: \"fas fa-bacon\",\n      subtypes: [\"salami\", \"proscuitto\", \"bresaola\", \"bacon\"],\n      pairingArray: [1, 1, 2, 1, 0, 0, 1, 2, 1]\n    },\n    pork: {\n      subtypes: [\"roast\", \"tenderloin\", \"pork chop\"],\n      pairingArray: [1, 2, 0, 1, 0, 0, 1, 0, 0]\n    },\n    poultry: {\n      icon: \"fas fa-drumstick-bite\",\n      subtypes: [\"chicken\", \"duck\", \"turkey\"],\n      pairingArray: [0, 1, 2, 1, 2, 1, 1, 0, 0]\n    },\n    mollusk: {\n      subtypes: [\"oyster\", \"mussel\", \"clam\"],\n      pairingArray: [0, 0, 0, 0, 0, 1, 2, 0, 0]\n    },\n    fish: {\n      icon: \"fas fa-fish\",\n      subtypes: [\"tuna\", \"cod\", \"trout\", \"bass\"],\n      pairingArray: [0, 0, 0, 0, 1, 2, 1, 0, 0]\n    },\n    lobsterandshellfish: {\n      subtypes: [\"prawn\", \"crab\", \"langoustine\"],\n      pairingArray: [0, 0, 0, 1, 2, 1, 0, 1, 0]\n    }\n  },\n  preparation: {\n    grilledorbarbecued: [2, 1, 1, 0, 0, 0, 1, 1, 0],\n    sauteedorfried: [0, 0, 2, 1, 1, 1, 1, 0, 0],\n    smoked: [1, 2, 1, 1, 0, 0, 1, 0, 1],\n    roasted: [2, 1, 1, 1, 0, 0, 0, 1, 0],\n    poachedorsteamed: [0, 0, 0, 0, 1, 2, 1, 1, 0]\n  },\n  dairy: {\n    softcheesecream: {\n      subtypes: [\"brie\", \"mascarpone\", \"creme fraiche\"],\n      pairingArray: [0, 1, 2, 1, 2, 1, 1, 1, 1]\n    },\n    pungentcheese: {\n      subtypes: [\"bleu\", \"gorgonzola\", \"stilton\", \"roquefort\"],\n      pairingArray: [1, 2, 0, 1, 0, 1, 1, 1, 2]\n    },\n    hardcheese: {\n      subtypes: [\"cheddar\", \"pecorino\", \"manchego\", \"asiago\", \"parmesan\"],\n      pairingArray: [2, 1, 0, 1, 1, 0, 1, 0, 0]\n    }\n  },\n  vegetable: {\n    alliums: {\n      subtypes: ['onion', 'shallot', 'garlic', 'scallion'],\n      pairingArray: [1, 2, 1, 1, 1, 1, 1, 1, 0]\n    },\n    greenvegetables: {\n      subtypes: ['green bean', 'kale', 'lettuce'],\n      pairingArray: [0, 0, 0, 0, 0, 2, 1, 0, 0]\n    },\n    rootvegandsquash: {\n      subtypes: ['turnip', 'butternut', 'pumpkin', 'delicata', 'carrot'],\n      pairingArray: [0, 0, 0, 2, 1, 0, 0, 1, 0]\n    },\n    nightshades: {\n      subtypes: ['tomato', 'eggplant', 'bell pepper'],\n      pairingArray: [1, 2, 0, 1, 0, 0, 0, 1, 0]\n    },\n    funghi: {\n      subtypes: ['crimini', 'maitake', 'chanterelle'],\n      pairingArray: [1, 2, 2, 0, 2, 0, 0, 0, 0]\n    },\n    nutsandseeds: {\n      subtypes: ['peanut', 'almond', 'pecan', 'sesame'],\n      pairingArray: [0, 0, 1, 1, 1, 1, 1, 2, 0]\n    },\n    beansandpeas: {\n      subtypes: ['lentil', 'navy', 'pinto', 'chickpea'],\n      pairingArray: [0, 1, 0, 1, 0, 2, 1, 0, 0]\n    }\n  },\n  herbandspice: {\n    blackpepper: {\n      pairingArray: [2, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    redpepper: {\n      subtypes: ['ancho', 'aleppo', 'chipotle', 'chili'],\n      pairingArray: [1, 2, 0, 1, 0, 1, 1, 1, 0]\n    },\n    hotandspicy: {\n      subtypes: ['hot sauce', 'habanero', 'sichuan'],\n      pairingArray: [0, 0, 0, 0, 0, 1, 1, 2, 0]\n    },\n    herbs: {\n      subtypes: ['thyme', 'oregano', 'basil', 'tarragon'],\n      pairingArray: [0, 1, 1, 1, 1, 2, 0, 0, 0]\n    },\n    bakingspices: {\n      subtypes: ['cinnamon', 'clove', 'allspice', 'mace'],\n      pairingArray: [0, 1, 0, 1, 0, 0, 0, 1, 2]\n    },\n    exoticaromaticspices: {\n      subtypes: ['anise', 'turmeric', 'saffron', 'fennel', 'ginger'],\n      pairingArray: [0, 2, 1, 1, 0, 0, 1, 2, 0]\n    }\n  },\n  starch: {\n    whitestarches: {\n      subtypes: ['flour', 'white rice', 'pasta', 'bread', 'tortillas'],\n      pairingArray: [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    },\n    wholewheatgrains: {\n      subtypes: ['quinoa', 'farro', 'brown rice'],\n      pairingArray: [0, 0, 1, 1, 1, 0, 0, 2, 0]\n    },\n    sweetstarchyveg: {\n      subtypes: ['sweet potato', 'yucca', 'taro'],\n      pairingArray: [0, 0, 0, 1, 0, 0, 0, 2, 0]\n    },\n    potato: {\n      pairingArray: [1, 1, 1, 1, 1, 1, 1, 1, 0]\n    }\n  },\n  sweet: {\n    fruit: {\n      subtypes: ['strawberry', 'orange', 'apple', 'peach'],\n      pairingArray: [0, 0, 0, 0, 0, 0, 1, 2, 1]\n    },\n    vanillaandcaramel: {\n      subtypes: ['creme brulee', 'ice cream'],\n      pairingArray: [0, 0, 0, 0, 0, 0, 0, 1, 1]\n    },\n    chocolateandcoffee: {\n      pairingArray: [0, 0, 0, 0, 0, 0, 0, 0, 2]\n    }\n  }\n};\nexport default foodTypes; // //black pepper steak\n// let ingredient1array = foodTypes.meat.redmeat.pairingArray;\n// let prep = foodTypes.preparation.grilledorbarbecued;\n// let ingredient2array = foodTypes.herbandspice.blackpepper.pairingArray;\n// let result = []\n// function calcPairing() {\n//   prep.forEach((item, index) => {\n//     result.push(item);\n//   });\n//   ingredient1array.forEach((item, index) => {\n//     result[index] += item;\n//   });\n//   ingredient2array.forEach((item, index) => {\n//     result[index] += item;\n//   });\n//   let winner = result.indexOf(Math.max(...result));\n//   return wineTypes[wineIndexes[winner]];\n// }\n// //foodTypes\n// ////meat\n// //////redmeat\n// ////////subTypes\n// for (const type in foodTypes) {\n//   console.log(`<li>\\n<a href=\"\">${type}</a>`)\n// }","map":{"version":3,"sources":["/Users/jameshall 1/Desktop/seir-526/project-2-react/pair/src/foodTypeData.js"],"names":["React","foodTypes","meat","redmeat","subtypes","pairingArray","curedmeat","icon","pork","poultry","mollusk","fish","lobsterandshellfish","preparation","grilledorbarbecued","sauteedorfried","smoked","roasted","poachedorsteamed","dairy","softcheesecream","pungentcheese","hardcheese","vegetable","alliums","greenvegetables","rootvegandsquash","nightshades","funghi","nutsandseeds","beansandpeas","herbandspice","blackpepper","redpepper","hotandspicy","herbs","bakingspices","exoticaromaticspices","starch","whitestarches","wholewheatgrains","sweetstarchyveg","potato","sweet","fruit","vanillaandcaramel","chocolateandcoffee"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,SAAjB,CADH;AAEPC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AAFP,KADL;AAKJC,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAE,cADG;AAETH,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,YAAX,EAAyB,UAAzB,EAAqC,OAArC,CAFD;AAGTC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AAHL,KALP;AAUJG,IAAAA,IAAI,EAAE;AACJJ,MAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU,YAAV,EAAwB,WAAxB,CADN;AAEJC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AAFV,KAVF;AAcJI,IAAAA,OAAO,EAAE;AACPF,MAAAA,IAAI,EAAE,uBADC;AAEPH,MAAAA,QAAQ,EAAE,CAAC,SAAD,EAAY,MAAZ,EAAoB,QAApB,CAFH;AAGPC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AAHP,KAdL;AAmBJK,IAAAA,OAAO,EAAE;AACPN,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,MAArB,CADH;AAEPC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AAFP,KAnBL;AAuBJM,IAAAA,IAAI,EAAE;AACJJ,MAAAA,IAAI,EAAE,aADF;AAEJH,MAAAA,QAAQ,EAAE,CAAC,MAAD,EAAS,KAAT,EAAgB,OAAhB,EAAyB,MAAzB,CAFN;AAGJC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AAHV,KAvBF;AA4BJO,IAAAA,mBAAmB,EAAE;AACnBR,MAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,aAAlB,CADS;AAEnBC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AAFK;AA5BjB,GADU;AAkChBQ,EAAAA,WAAW,EAAE;AACXC,IAAAA,kBAAkB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CADT;AAEXC,IAAAA,cAAc,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAFL;AAGXC,IAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAHG;AAIXC,IAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAJE;AAKXC,IAAAA,gBAAgB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AALP,GAlCG;AA0ChBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,eAAe,EAAE;AACfhB,MAAAA,QAAQ,EAAE,CAAC,MAAD,EAAS,YAAT,EAAuB,eAAvB,CADK;AAEfC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AAFC,KADZ;AAKLgB,IAAAA,aAAa,EAAE;AACbjB,MAAAA,QAAQ,EAAE,CAAC,MAAD,EAAS,YAAT,EAAuB,SAAvB,EAAkC,WAAlC,CADG;AAEbC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AAFD,KALV;AASLiB,IAAAA,UAAU,EAAE;AACVlB,MAAAA,QAAQ,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwB,UAAxB,EAAoC,QAApC,EAA8C,UAA9C,CADA;AAEVC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AAFJ;AATP,GA1CS;AAwDhBkB,EAAAA,SAAS,EAAE;AACTC,IAAAA,OAAO,EAAE;AACPpB,MAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU,SAAV,EAAqB,QAArB,EAA+B,UAA/B,CADH;AAEPC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFP,KADA;AAKToB,IAAAA,eAAe,EAAE;AACfrB,MAAAA,QAAQ,EAAE,CAAC,YAAD,EAAe,MAAf,EAAuB,SAAvB,CADK;AAEfC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFC,KALR;AASTqB,IAAAA,gBAAgB,EAAE;AAChBtB,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,WAAX,EAAwB,SAAxB,EAAmC,UAAnC,EAA+C,QAA/C,CADM;AAEhBC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFE,KATT;AAaTsB,IAAAA,WAAW,EAAE;AACXvB,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,UAAX,EAAuB,aAAvB,CADC;AAEXC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFH,KAbJ;AAiBTuB,IAAAA,MAAM,EAAE;AACNxB,MAAAA,QAAQ,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,aAAvB,CADJ;AAENC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFR,KAjBC;AAqBTwB,IAAAA,YAAY,EAAE;AACZzB,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,EAA8B,QAA9B,CADE;AAEZC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFF,KArBL;AAyBTyB,IAAAA,YAAY,EAAE;AACZ1B,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,MAAX,EAAmB,OAAnB,EAA4B,UAA5B,CADE;AAEZC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFF;AAzBL,GAxDK;AAsFhB0B,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AACX3B,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AADH,KADD;AAIZ4B,IAAAA,SAAS,EAAE;AACT7B,MAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,OAAhC,CADD;AAETC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFL,KAJC;AAQZ6B,IAAAA,WAAW,EAAE;AACX9B,MAAAA,QAAQ,EAAE,CAAC,WAAD,EAAc,UAAd,EAA0B,SAA1B,CADC;AAEXC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFH,KARD;AAYZ8B,IAAAA,KAAK,EAAE;AACL/B,MAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU,SAAV,EAAqB,OAArB,EAA8B,UAA9B,CADL;AAELC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFT,KAZK;AAgBZ+B,IAAAA,YAAY,EAAE;AACZhC,MAAAA,QAAQ,EAAE,CAAC,UAAD,EAAa,OAAb,EAAsB,UAAtB,EAAkC,MAAlC,CADE;AAEZC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFF,KAhBF;AAoBZgC,IAAAA,oBAAoB,EAAE;AACpBjC,MAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU,UAAV,EAAsB,SAAtB,EAAiC,QAAjC,EAA2C,QAA3C,CADU;AAEpBC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFM;AApBV,GAtFE;AA+GhBiC,EAAAA,MAAM,EAAE;AACNC,IAAAA,aAAa,EAAE;AACbnC,MAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU,YAAV,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,WAA1C,CADG;AAEbC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFD,KADT;AAKNmC,IAAAA,gBAAgB,EAAE;AAChBpC,MAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,OAAX,EAAoB,YAApB,CADM;AAEhBC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFE,KALZ;AASNoC,IAAAA,eAAe,EAAE;AACfrC,MAAAA,QAAQ,EAAE,CAAC,cAAD,EAAiB,OAAjB,EAA0B,MAA1B,CADK;AAEfC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFC,KATX;AAaNqC,IAAAA,MAAM,EAAE;AACNrC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AADR;AAbF,GA/GQ;AAgIhBsC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE;AACLxC,MAAAA,QAAQ,EAAE,CAAC,YAAD,EAAe,QAAf,EAAyB,OAAzB,EAAkC,OAAlC,CADL;AAELC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFT,KADF;AAKLwC,IAAAA,iBAAiB,EAAE;AACjBzC,MAAAA,QAAQ,EAAE,CAAC,cAAD,EAAiB,WAAjB,CADO;AAEjBC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AAFG,KALd;AASLyC,IAAAA,kBAAkB,EAAE;AAClBzC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB;AADI;AATf;AAhIS,CAAlB;AA+IA,eAAeJ,SAAf,C,CAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["import React from \"react\"\n\nconst foodTypes = {\n  meat: {\n    redmeat: {\n      subtypes: [\"beef\", \"lamb\", \"venison\"],\n      pairingArray: [2, 1, 0, 0, 0, 0, 0, 0, 0],\n    },\n    curedmeat: {\n      icon: \"fas fa-bacon\",\n      subtypes: [\"salami\", \"proscuitto\", \"bresaola\", \"bacon\"],\n      pairingArray: [1, 1, 2, 1, 0, 0, 1, 2, 1],\n    },\n    pork: {\n      subtypes: [\"roast\", \"tenderloin\", \"pork chop\"],\n      pairingArray: [1, 2, 0, 1, 0, 0, 1, 0, 0],\n    },\n    poultry: {\n      icon: \"fas fa-drumstick-bite\",\n      subtypes: [\"chicken\", \"duck\", \"turkey\"],\n      pairingArray: [0, 1, 2, 1, 2, 1, 1, 0, 0],\n    },\n    mollusk: {\n      subtypes: [\"oyster\", \"mussel\", \"clam\"],\n      pairingArray: [0, 0, 0, 0, 0, 1, 2, 0, 0],\n    },\n    fish: {\n      icon: \"fas fa-fish\",\n      subtypes: [\"tuna\", \"cod\", \"trout\", \"bass\"],\n      pairingArray: [0, 0, 0, 0, 1, 2, 1, 0, 0],\n    },\n    lobsterandshellfish: {\n      subtypes: [\"prawn\", \"crab\", \"langoustine\"],\n      pairingArray: [0, 0, 0, 1, 2, 1, 0, 1, 0],\n    },\n  },\n  preparation: {\n    grilledorbarbecued: [2, 1, 1, 0, 0, 0, 1, 1, 0],\n    sauteedorfried: [0, 0, 2, 1, 1, 1, 1, 0, 0],\n    smoked: [1, 2, 1, 1, 0, 0, 1, 0, 1],\n    roasted: [2, 1, 1, 1, 0, 0, 0, 1, 0],\n    poachedorsteamed: [0, 0, 0, 0, 1, 2, 1, 1, 0],\n  },\n\n  dairy: {\n    softcheesecream: {\n      subtypes: [\"brie\", \"mascarpone\", \"creme fraiche\"],\n      pairingArray: [0, 1, 2, 1, 2, 1, 1, 1, 1],\n    },\n    pungentcheese: {\n      subtypes: [\"bleu\", \"gorgonzola\", \"stilton\", \"roquefort\"],\n      pairingArray: [1, 2, 0, 1, 0, 1, 1, 1, 2],\n    },\n    hardcheese: {\n      subtypes: [\"cheddar\", \"pecorino\", \"manchego\", \"asiago\", \"parmesan\"],\n      pairingArray: [2, 1, 0, 1, 1, 0, 1, 0, 0],\n    },\n  },\n  vegetable: {\n    alliums: {\n      subtypes: ['onion', 'shallot', 'garlic', 'scallion'],\n      pairingArray: [1,2,1,1,1,1,1,1,0]\n    },\n    greenvegetables: {\n      subtypes: ['green bean', 'kale', 'lettuce'],\n      pairingArray: [0,0,0,0,0,2,1,0,0]\n    },\n    rootvegandsquash: {\n      subtypes: ['turnip', 'butternut', 'pumpkin', 'delicata', 'carrot'],\n      pairingArray: [0,0,0,2,1,0,0,1,0]\n    },\n    nightshades: {\n      subtypes: ['tomato', 'eggplant', 'bell pepper'],\n      pairingArray: [1,2,0,1,0,0,0,1,0]\n    },\n    funghi: {\n      subtypes: ['crimini', 'maitake', 'chanterelle'],\n      pairingArray: [1,2,2,0,2,0,0,0,0]\n    },\n    nutsandseeds: {\n      subtypes: ['peanut', 'almond', 'pecan', 'sesame'],\n      pairingArray: [0,0,1,1,1,1,1,2,0]\n    },\n    beansandpeas: {\n      subtypes: ['lentil', 'navy', 'pinto', 'chickpea'],\n      pairingArray: [0,1,0,1,0,2,1,0,0]\n    }\n  },\n  herbandspice: {\n    blackpepper: {\n      pairingArray: [2,1,0,0,0,0,0,0,0]\n    },\n    redpepper: {\n      subtypes: ['ancho', 'aleppo', 'chipotle', 'chili'],\n      pairingArray: [1,2,0,1,0,1,1,1,0]\n    },\n    hotandspicy: {\n      subtypes: ['hot sauce', 'habanero', 'sichuan'],\n      pairingArray: [0,0,0,0,0,1,1,2,0]\n    },\n    herbs: {\n      subtypes: ['thyme', 'oregano', 'basil', 'tarragon'],\n      pairingArray: [0,1,1,1,1,2,0,0,0]\n    },\n    bakingspices: {\n      subtypes: ['cinnamon', 'clove', 'allspice', 'mace'],\n      pairingArray: [0,1,0,1,0,0,0,1,2]\n    },\n    exoticaromaticspices: {\n      subtypes: ['anise', 'turmeric', 'saffron', 'fennel', 'ginger'],\n      pairingArray: [0,2,1,1,0,0,1,2,0]\n    }\n  },\n  starch: {\n    whitestarches: {\n      subtypes: ['flour', 'white rice', 'pasta', 'bread', 'tortillas'],\n      pairingArray: [1,1,1,1,1,1,1,1,1]\n    },\n    wholewheatgrains: {\n      subtypes: ['quinoa', 'farro', 'brown rice'],\n      pairingArray: [0,0,1,1,1,0,0,2,0]\n    },\n    sweetstarchyveg: {\n      subtypes: ['sweet potato', 'yucca', 'taro'],\n      pairingArray: [0,0,0,1,0,0,0,2,0]\n    },\n    potato: {\n      pairingArray: [1,1,1,1,1,1,1,1,0]\n    }\n  },\n  sweet: {\n    fruit: {\n      subtypes: ['strawberry', 'orange', 'apple', 'peach'],\n      pairingArray: [0,0,0,0,0,0,1,2,1]\n    },\n    vanillaandcaramel: {\n      subtypes: ['creme brulee', 'ice cream'],\n      pairingArray: [0,0,0,0,0,0,0,1,1]\n    },\n    chocolateandcoffee: {\n      pairingArray: [0,0,0,0,0,0,0,0,2]\n    }\n  }\n};\n\nexport default foodTypes;\n\n\n// //black pepper steak\n// let ingredient1array = foodTypes.meat.redmeat.pairingArray;\n// let prep = foodTypes.preparation.grilledorbarbecued;\n// let ingredient2array = foodTypes.herbandspice.blackpepper.pairingArray;\n// let result = []\n\n// function calcPairing() {\n//   prep.forEach((item, index) => {\n//     result.push(item);\n//   });\n//   ingredient1array.forEach((item, index) => {\n//     result[index] += item;\n//   });\n//   ingredient2array.forEach((item, index) => {\n//     result[index] += item;\n//   });\n//   let winner = result.indexOf(Math.max(...result));\n\n//   return wineTypes[wineIndexes[winner]];\n// }\n\n// //foodTypes\n// ////meat\n// //////redmeat\n// ////////subTypes\n\n// for (const type in foodTypes) {\n//   console.log(`<li>\\n<a href=\"\">${type}</a>`)\n\n// }"]},"metadata":{},"sourceType":"module"}