{"ast":null,"code":"const foodTypes = {\n  meat: {\n    beef: {\n      name: \"Red Meat\",\n      iconUrl: \"./assets/bacon.png\",\n      subtypes: [\"beef\", \"lamb\", \"venison\"],\n      pairingArray: [2, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    bacon: {\n      name: \"Cured Meat\",\n      iconUrl: \"./assets/bacon.png\",\n      subtypes: [\"salami\", \"proscuitto\", \"bresaola\", \"bacon\"],\n      pairingArray: [1, 1, 2, 1, 0, 0, 1, 2, 1]\n    },\n    pork: {\n      name: \"Pork\",\n      iconUrl: \"./assets/pig.png\",\n      subtypes: [\"roast\", \"tenderloin\", \"pork chop\"],\n      pairingArray: [1, 2, 0, 1, 0, 0, 1, 0, 0]\n    },\n    chicken: {\n      icon: \"fas fa-drumstick-bite\",\n      subtypes: [\"chicken\", \"duck\", \"turkey\"],\n      pairingArray: [0, 1, 2, 1, 2, 1, 1, 0, 0]\n    },\n    oyster: {\n      subtypes: [\"oyster\", \"mussel\", \"clam\"],\n      pairingArray: [0, 0, 0, 0, 0, 1, 2, 0, 0]\n    },\n    fish: {\n      icon: \"fas fa-fish\",\n      subtypes: [\"tuna\", \"cod\", \"trout\", \"bass\"],\n      pairingArray: [0, 0, 0, 0, 1, 2, 1, 0, 0]\n    },\n    prawn: {\n      subtypes: [\"prawn\", \"crab\", \"langoustine\"],\n      pairingArray: [0, 0, 0, 1, 2, 1, 0, 1, 0]\n    }\n  },\n  preparation: {\n    grilled: [2, 1, 1, 0, 0, 0, 1, 1, 0],\n    barbecued: [2, 1, 1, 0, 0, 0, 1, 1, 0],\n    sauteed: [0, 0, 2, 1, 1, 1, 1, 0, 0],\n    fried: [0, 0, 2, 1, 1, 1, 1, 0, 0],\n    smoked: [1, 2, 1, 1, 0, 0, 1, 0, 1],\n    roasted: [2, 1, 1, 1, 0, 0, 0, 1, 0],\n    steamed: [0, 0, 0, 0, 1, 2, 1, 1, 0]\n  },\n  dairy: {\n    brie: {\n      subtypes: [\"brie\", \"mascarpone\", \"creme fraiche\"],\n      pairingArray: [0, 1, 2, 1, 2, 1, 1, 1, 1]\n    },\n    gorgonzola: {\n      subtypes: [\"bleu\", \"gorgonzola\", \"stilton\", \"roquefort\"],\n      pairingArray: [1, 2, 0, 1, 0, 1, 1, 1, 2]\n    },\n    parmesan: {\n      subtypes: [\"cheddar\", \"pecorino\", \"manchego\", \"asiago\", \"parmesan\"],\n      pairingArray: [2, 1, 0, 1, 1, 0, 1, 0, 0]\n    }\n  },\n  vegetable: {\n    onion: {\n      subtypes: ['onion', 'shallot', 'garlic', 'scallion'],\n      pairingArray: [1, 2, 1, 1, 1, 1, 1, 1, 0]\n    },\n    \"green bean\": {\n      subtypes: ['green bean', 'kale', 'lettuce'],\n      pairingArray: [0, 0, 0, 0, 0, 2, 1, 0, 0]\n    },\n    squash: {\n      subtypes: ['turnip', 'butternut', 'pumpkin', 'delicata', 'carrot'],\n      pairingArray: [0, 0, 0, 2, 1, 0, 0, 1, 0]\n    },\n    eggplant: {\n      subtypes: ['tomato', 'eggplant', 'bell pepper'],\n      pairingArray: [1, 2, 0, 1, 0, 0, 0, 1, 0]\n    },\n    mushroom: {\n      subtypes: ['crimini', 'maitake', 'chanterelle'],\n      pairingArray: [1, 2, 2, 0, 2, 0, 0, 0, 0]\n    },\n    nuts: {\n      subtypes: ['peanut', 'almond', 'pecan', 'sesame'],\n      pairingArray: [0, 0, 1, 1, 1, 1, 1, 2, 0]\n    },\n    beans: {\n      subtypes: ['lentil', 'navy', 'pinto', 'chickpea'],\n      pairingArray: [0, 1, 0, 1, 0, 2, 1, 0, 0]\n    }\n  },\n  herbandspice: {\n    \"black pepper\": {\n      pairingArray: [2, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    \"red pepper\": {\n      subtypes: ['ancho', 'aleppo', 'chipotle', 'chili'],\n      pairingArray: [1, 2, 0, 1, 0, 1, 1, 1, 0]\n    },\n    spicy: {\n      subtypes: ['hot sauce', 'habanero', 'sichuan'],\n      pairingArray: [0, 0, 0, 0, 0, 1, 1, 2, 0]\n    },\n    herbs: {\n      subtypes: ['thyme', 'oregano', 'basil', 'tarragon'],\n      pairingArray: [0, 1, 1, 1, 1, 2, 0, 0, 0]\n    },\n    cinnamon: {\n      subtypes: ['cinnamon', 'clove', 'allspice', 'mace'],\n      pairingArray: [0, 1, 0, 1, 0, 0, 0, 1, 2]\n    },\n    ginger: {\n      subtypes: ['anise', 'turmeric', 'saffron', 'fennel', 'ginger'],\n      pairingArray: [0, 2, 1, 1, 0, 0, 1, 2, 0]\n    }\n  },\n  starch: {\n    bread: {\n      subtypes: ['flour', 'white rice', 'pasta', 'bread', 'tortillas'],\n      pairingArray: [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    },\n    quinoa: {\n      subtypes: ['quinoa', 'farro', 'brown rice'],\n      pairingArray: [0, 0, 1, 1, 1, 0, 0, 2, 0]\n    },\n    \"sweet potato\": {\n      subtypes: ['sweet potato', 'yucca', 'taro'],\n      pairingArray: [0, 0, 0, 1, 0, 0, 0, 2, 0]\n    },\n    potato: {\n      pairingArray: [1, 1, 1, 1, 1, 1, 1, 1, 0]\n    }\n  },\n  sweet: {\n    fruit: {\n      subtypes: ['strawberry', 'orange', 'apple', 'peach'],\n      pairingArray: [0, 0, 0, 0, 0, 0, 1, 2, 1]\n    },\n    cream: {\n      subtypes: ['creme brulee', 'ice cream'],\n      pairingArray: [0, 0, 0, 0, 0, 0, 0, 1, 1]\n    },\n    chocolate: {\n      pairingArray: [0, 0, 0, 0, 0, 0, 0, 0, 2]\n    },\n    coffee: {\n      pairingArray: [0, 0, 0, 0, 0, 0, 0, 0, 2]\n    }\n  }\n};\nexport default foodTypes; // //black pepper steak\n// let ingredient1array = foodTypes.meat.redmeat.pairingArray;\n// let prep = foodTypes.preparation.grilledorbarbecued;\n// let ingredient2array = foodTypes.herbandspice.blackpepper.pairingArray;\n// let result = []\n// function calcPairing() {\n//   prep.forEach((item, index) => {\n//     result.push(item);\n//   });\n//   ingredient1array.forEach((item, index) => {\n//     result[index] += item;\n//   });\n//   ingredient2array.forEach((item, index) => {\n//     result[index] += item;\n//   });\n//   let winner = result.indexOf(Math.max(...result));\n//   return wineTypes[wineIndexes[winner]];\n// }\n// //foodTypes\n// ////meat\n// //////redmeat\n// ////////subTypes\n// for (const type in foodTypes) {\n//   console.log(`<li>\\n<a href=\"\">${type}</a>`)\n// }","map":{"version":3,"sources":["/Users/jameshall 1/Desktop/seir-526/pair/src/foodTypeData.js"],"names":["foodTypes","meat","beef","name","iconUrl","subtypes","pairingArray","bacon","pork","chicken","icon","oyster","fish","prawn","preparation","grilled","barbecued","sauteed","fried","smoked","roasted","steamed","dairy","brie","gorgonzola","parmesan","vegetable","onion","squash","eggplant","mushroom","nuts","beans","herbandspice","spicy","herbs","cinnamon","ginger","starch","bread","quinoa","potato","sweet","fruit","cream","chocolate","coffee"],"mappings":"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","sourcesContent":["const foodTypes = {\n  meat: {\n    beef: {\n      name: \"Red Meat\",\n      iconUrl: \"./assets/bacon.png\",\n      subtypes: [\"beef\", \"lamb\", \"venison\"],\n      pairingArray: [2, 1, 0, 0, 0, 0, 0, 0, 0],\n    },\n    bacon: {\n      name: \"Cured Meat\",\n      iconUrl: \"./assets/bacon.png\",\n      subtypes: [\"salami\", \"proscuitto\", \"bresaola\", \"bacon\"],\n      pairingArray: [1, 1, 2, 1, 0, 0, 1, 2, 1],\n    },\n    pork: {\n      name: \"Pork\",\n      iconUrl: \"./assets/pig.png\",\n      subtypes: [\"roast\", \"tenderloin\", \"pork chop\"],\n      pairingArray: [1, 2, 0, 1, 0, 0, 1, 0, 0],\n    },\n    chicken: {\n      icon: \"fas fa-drumstick-bite\",\n      subtypes: [\"chicken\", \"duck\", \"turkey\"],\n      pairingArray: [0, 1, 2, 1, 2, 1, 1, 0, 0],\n    },\n    oyster: {\n      subtypes: [\"oyster\", \"mussel\", \"clam\"],\n      pairingArray: [0, 0, 0, 0, 0, 1, 2, 0, 0],\n    },\n    fish: {\n      icon: \"fas fa-fish\",\n      subtypes: [\"tuna\", \"cod\", \"trout\", \"bass\"],\n      pairingArray: [0, 0, 0, 0, 1, 2, 1, 0, 0],\n    },\n    prawn: {\n      subtypes: [\"prawn\", \"crab\", \"langoustine\"],\n      pairingArray: [0, 0, 0, 1, 2, 1, 0, 1, 0],\n    },\n  },\n  preparation: {\n    grilled: [2, 1, 1, 0, 0, 0, 1, 1, 0],\n    barbecued: [2, 1, 1, 0, 0, 0, 1, 1, 0],\n    sauteed: [0, 0, 2, 1, 1, 1, 1, 0, 0],\n    fried: [0, 0, 2, 1, 1, 1, 1, 0, 0],\n    smoked: [1, 2, 1, 1, 0, 0, 1, 0, 1],\n    roasted: [2, 1, 1, 1, 0, 0, 0, 1, 0],\n    steamed: [0, 0, 0, 0, 1, 2, 1, 1, 0],\n  },\n\n  dairy: {\n    brie: {\n      subtypes: [\"brie\", \"mascarpone\", \"creme fraiche\"],\n      pairingArray: [0, 1, 2, 1, 2, 1, 1, 1, 1],\n    },\n    gorgonzola: {\n      subtypes: [\"bleu\", \"gorgonzola\", \"stilton\", \"roquefort\"],\n      pairingArray: [1, 2, 0, 1, 0, 1, 1, 1, 2],\n    },\n    parmesan: {\n      subtypes: [\"cheddar\", \"pecorino\", \"manchego\", \"asiago\", \"parmesan\"],\n      pairingArray: [2, 1, 0, 1, 1, 0, 1, 0, 0],\n    },\n  },\n  vegetable: {\n    onion: {\n      subtypes: ['onion', 'shallot', 'garlic', 'scallion'],\n      pairingArray: [1,2,1,1,1,1,1,1,0]\n    },\n    \"green bean\": {\n      subtypes: ['green bean', 'kale', 'lettuce'],\n      pairingArray: [0,0,0,0,0,2,1,0,0]\n    },\n    squash: {\n      subtypes: ['turnip', 'butternut', 'pumpkin', 'delicata', 'carrot'],\n      pairingArray: [0,0,0,2,1,0,0,1,0]\n    },\n    eggplant: {\n      subtypes: ['tomato', 'eggplant', 'bell pepper'],\n      pairingArray: [1,2,0,1,0,0,0,1,0]\n    },\n    mushroom: {\n      subtypes: ['crimini', 'maitake', 'chanterelle'],\n      pairingArray: [1,2,2,0,2,0,0,0,0]\n    },\n    nuts: {\n      subtypes: ['peanut', 'almond', 'pecan', 'sesame'],\n      pairingArray: [0,0,1,1,1,1,1,2,0]\n    },\n    beans: {\n      subtypes: ['lentil', 'navy', 'pinto', 'chickpea'],\n      pairingArray: [0,1,0,1,0,2,1,0,0]\n    }\n  },\n  herbandspice: {\n    \"black pepper\": {\n      pairingArray: [2,1,0,0,0,0,0,0,0]\n    },\n    \"red pepper\": {\n      subtypes: ['ancho', 'aleppo', 'chipotle', 'chili'],\n      pairingArray: [1,2,0,1,0,1,1,1,0]\n    },\n    spicy: {\n      subtypes: ['hot sauce', 'habanero', 'sichuan'],\n      pairingArray: [0,0,0,0,0,1,1,2,0]\n    },\n    herbs: {\n      subtypes: ['thyme', 'oregano', 'basil', 'tarragon'],\n      pairingArray: [0,1,1,1,1,2,0,0,0]\n    },\n    cinnamon: {\n      subtypes: ['cinnamon', 'clove', 'allspice', 'mace'],\n      pairingArray: [0,1,0,1,0,0,0,1,2]\n    },\n    ginger: {\n      subtypes: ['anise', 'turmeric', 'saffron', 'fennel', 'ginger'],\n      pairingArray: [0,2,1,1,0,0,1,2,0]\n    }\n  },\n  starch: {\n    bread: {\n      subtypes: ['flour', 'white rice', 'pasta', 'bread', 'tortillas'],\n      pairingArray: [1,1,1,1,1,1,1,1,1]\n    },\n    quinoa: {\n      subtypes: ['quinoa', 'farro', 'brown rice'],\n      pairingArray: [0,0,1,1,1,0,0,2,0]\n    },\n    \"sweet potato\": {\n      subtypes: ['sweet potato', 'yucca', 'taro'],\n      pairingArray: [0,0,0,1,0,0,0,2,0]\n    },\n    potato: {\n      pairingArray: [1,1,1,1,1,1,1,1,0]\n    }\n  },\n  sweet: {\n    fruit: {\n      subtypes: ['strawberry', 'orange', 'apple', 'peach'],\n      pairingArray: [0,0,0,0,0,0,1,2,1]\n    },\n    cream: {\n      subtypes: ['creme brulee', 'ice cream'],\n      pairingArray: [0,0,0,0,0,0,0,1,1]\n    },\n    chocolate: {\n      pairingArray: [0,0,0,0,0,0,0,0,2]\n    },\n    coffee: {\n      pairingArray: [0,0,0,0,0,0,0,0,2]\n    }\n  }\n};\n\nexport default foodTypes;\n\n\n// //black pepper steak\n// let ingredient1array = foodTypes.meat.redmeat.pairingArray;\n// let prep = foodTypes.preparation.grilledorbarbecued;\n// let ingredient2array = foodTypes.herbandspice.blackpepper.pairingArray;\n// let result = []\n\n// function calcPairing() {\n//   prep.forEach((item, index) => {\n//     result.push(item);\n//   });\n//   ingredient1array.forEach((item, index) => {\n//     result[index] += item;\n//   });\n//   ingredient2array.forEach((item, index) => {\n//     result[index] += item;\n//   });\n//   let winner = result.indexOf(Math.max(...result));\n\n//   return wineTypes[wineIndexes[winner]];\n// }\n\n// //foodTypes\n// ////meat\n// //////redmeat\n// ////////subTypes\n\n// for (const type in foodTypes) {\n//   console.log(`<li>\\n<a href=\"\">${type}</a>`)\n\n// }"]},"metadata":{},"sourceType":"module"}